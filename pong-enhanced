<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Vocabulary Pong - Enhanced</title>
  <style>
    /* Reset & Basic Styles */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    body {
      background: #f2f2f2;
      font-family: sans-serif;
    }
    #gameContainer {
      position: relative;
      margin: 20px auto;
      width: 800px;
      height: 400px;
      border: 2px solid #333;
    }
    canvas {
      display: block;
      background: black; /* default classic setting */
    }
    /* Start Overlay */
    #startOverlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.6);
      color: white;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      z-index: 2;
    }
    #startOverlay button {
      padding: 10px 20px;
      font-size: 18px;
      margin-bottom: 10px;
      cursor: pointer;
    }
    /* Settings Button (Gear Icon) */
    #settingsButton {
      position: absolute;
      top: 10px;
      right: 10px;
      z-index: 3;
      padding: 5px 10px;
      font-size: 20px;
      background: #ffffffcc;
      border: 1px solid #888;
      border-radius: 4px;
      cursor: pointer;
    }
    /* Modal Styles */
    .modal {
      display: none;
      position: fixed;
      z-index: 10;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: auto;
      background-color: rgba(0,0,0,0.6);
    }
    .modal-content {
      background-color: #fefefe;
      margin: 10% auto;
      padding: 20px;
      border: 1px solid #888;
      width: 300px;
      text-align: center;
      border-radius: 8px;
    }
    .close {
      color: #aaa;
      float: right;
      font-size: 28px;
      font-weight: bold;
      cursor: pointer;
    }
    .close:hover {
      color: black;
    }
    .modal-content label,
    .modal-content select,
    .modal-content input,
    .modal-content button {
      margin: 10px 0;
      display: block;
      width: 100%;
    }
    /* Mobile Controls (Bigger Buttons) */
    #mobileControls {
      display: none;
      position: absolute;
      bottom: 10px;
      left: 50%;
      transform: translateX(-50%);
      z-index: 3;
    }
    #mobileControls button {
      padding: 20px;
      font-size: 24px;
      margin: 0 8px;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <div id="gameContainer">
    <canvas id="gameCanvas" width="800" height="400"></canvas>
    
    <!-- Start Overlay -->
    <div id="startOverlay">
      <button id="startButton">Start</button>
      <p>Press space or tap to start!</p>
    </div>
    
    <!-- Settings Button (Gear Icon) -->
    <button id="settingsButton">⚙</button>
    
    <!-- Settings Modal -->
    <div id="settingsModal" class="modal">
      <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Settings</h2>
        <label for="gameColor">Game Color:</label>
        <select id="gameColor">
          <option value="black">Classic Black</option>
          <option value="red">Red</option>
          <option value="white">White</option>
          <option value="blue">Blue</option>
        </select>
        <label for="vocabDifficulty">Vocabulary Difficulty:</label>
        <select id="vocabDifficulty">
          <option value="1">Level 1: 3–4 Letter Words</option>
          <option value="2">Level 2: 5–6 Letter Words</option>
          <option value="3">Level 3: 7+ Letter Words</option>
        </select>
        <label for="livesCount">Number of Lives (1-10):</label>
        <input type="number" id="livesCount" min="1" max="10" value="3" />
        <button id="saveSettings">Save</button>
      </div>
    </div>
    
    <!-- Vocabulary Challenge Modal -->
    <div id="vocabModal" class="modal">
      <div class="modal-content">
        <h2>Vocabulary Challenge</h2>
        <p id="vocabPrompt">Spell: </p>
        <input type="text" id="vocabAnswer" placeholder="Your answer" />
        <button id="submitVocab">Submit</button>
        <p id="vocabFeedback" style="color: red;"></p>
      </div>
    </div>
    
    <!-- Mobile Controls -->
    <div id="mobileControls">
      <button id="upButton">↑</button>
      <button id="downButton">↓</button>
    </div>
  </div>
  
  <script>
    // -----------------------
    // ASSET LOADING
    // -----------------------
    // Image Sprites (update paths accordingly)
    const paddleImage = new Image();
    paddleImage.src = "paddle.png";  // Paddle sprite
    const ballImage = new Image();
    ballImage.src = "ball.png";      // Ball sprite
    // Heart icons for lives
    const heartImage = new Image();
    heartImage.src = "heart.png";           // Intact heart
    const crackedHeartImage = new Image();
    crackedHeartImage.src = "heart_cracked.png";  // Cracked heart

    // Sound Effects (update paths accordingly)
    const hitSound = new Audio("hit.mp3");
    const scoreSound = new Audio("score.mp3");
    const failSound = new Audio("fail.mp3");
    const successSound = new Audio("success.mp3");

    // -----------------------
    // GET DOM Elements
    // -----------------------
    const canvas = document.getElementById("gameCanvas");
    const ctx = canvas.getContext("2d");
    const startOverlay = document.getElementById("startOverlay");
    const startButton = document.getElementById("startButton");
    const settingsButton = document.getElementById("settingsButton");
    const settingsModal = document.getElementById("settingsModal");
    const closeSettings = settingsModal.querySelector(".close");
    const gameColorSelect = document.getElementById("gameColor");
    const vocabDifficultySelect = document.getElementById("vocabDifficulty");
    const livesCountInput = document.getElementById("livesCount");
    const saveSettingsButton = document.getElementById("saveSettings");
    const vocabModal = document.getElementById("vocabModal");
    const vocabPrompt = document.getElementById("vocabPrompt");
    const vocabAnswerInput = document.getElementById("vocabAnswer");
    const submitVocabButton = document.getElementById("submitVocab");
    const vocabFeedback = document.getElementById("vocabFeedback");
    const mobileControls = document.getElementById("mobileControls");
    const upButton = document.getElementById("upButton");
    const downButton = document.getElementById("downButton");

    // Show mobile controls if on a touch device.
    if ('ontouchstart' in window) {
      mobileControls.style.display = "block";
    } else {
      mobileControls.style.display = "none";
    }

    // -----------------------
    // GAME SETTINGS & STATE
    // -----------------------
    let gameStarted = false;
    let gamePaused = false;
    let score = 0;
    let gameColor = "black"; // default background color
    function getContrastingColor(bg) { 
      return bg === "white" ? "black" : "white"; 
    }
    let contrastColor = getContrastingColor(gameColor);

    // Lives system.
    let maxLives = 3; // maximum lives from settings
    let playerLives = maxLives;
    // Array for heart cracking animations.
    let heartAnimations = []; // Each object: { index, startTime, duration }

    // Retrieve high score from localStorage.
    let highScore = parseInt(localStorage.getItem("vocabPongHighScore"), 10) || 0;

    // -----------------------
    // PADDLE & BALL SETTINGS
    // -----------------------
    const paddleWidth = 10, paddleHeight = 80, paddleSpeed = 5;
    let playerPaddle = { x: 10, y: canvas.height / 2 - paddleHeight / 2, width: paddleWidth, height: paddleHeight };
    let aiPaddle = { x: canvas.width - 20, y: canvas.height / 2 - paddleHeight / 2, width: paddleWidth, height: paddleHeight };
    let ball = {
      x: canvas.width / 2,
      y: canvas.height / 2,
      radius: 8,
      speed: 4,
      velocityX: 4,
      velocityY: 2
    };

    // Track key presses (Arrow keys and WASD)
    let keysDown = {};
    document.addEventListener("keydown", (e) => { keysDown[e.key] = true; });
    document.addEventListener("keyup", (e) => { keysDown[e.key] = false; });

    // Mobile control buttons (touch events)
    upButton.addEventListener("touchstart", (e) => { e.preventDefault(); playerPaddle.y -= paddleSpeed; });
    downButton.addEventListener("touchstart", (e) => { e.preventDefault(); playerPaddle.y += paddleSpeed; });

    // -----------------------
    // VOCABULARY SETTINGS
    // -----------------------
    let vocabDifficulty = "1"; // default level
    let usedWords = { "1": [], "2": [], "3": [] };
    const vocabWords = {
      "1": ["cat", "dog", "sun", "pen", "bag", "owl", "bat", "cup", "fox", "bee"],
      "2": ["apple", "grape", "pearl", "ocean", "river", "house", "plant", "chair", "table", "bread"],
      "3": ["computer", "elephant", "umbrella", "airplane", "mountain", "treasure", "hospital", "notebook", "dinosaur", "adventure"]
    };
    let currentWord = ""; // Word for the spelling challenge

    function getRandomVocabWord() {
      let words = vocabWords[vocabDifficulty];
      let used = usedWords[vocabDifficulty];
      let available = words.filter(word => !used.includes(word));
      if (available.length === 0) {
        usedWords[vocabDifficulty] = [];
        available = words;
      }
      let word = available[Math.floor(Math.random() * available.length)];
      usedWords[vocabDifficulty].push(word);
      return word;
    }

    // -----------------------
    // GAME FUNCTIONS
    // -----------------------
    // Reset the ball to the center and send it in a given direction.
    function resetBall(direction = 1) {
      ball.x = canvas.width / 2;
      ball.y = canvas.height / 2;
      ball.velocityX = 4 * direction;
      ball.velocityY = (Math.random() > 0.5 ? 2 : -2);
    }

    // Start the game (on tap or space key).
    function startGame() {
      gameStarted = true;
      gamePaused = false;
      startOverlay.style.display = "none";
      playerPaddle.y = canvas.height / 2 - paddleHeight / 2;
      aiPaddle.y = canvas.height / 2 - paddleHeight / 2;
      resetBall(1);
      gameLoop();
    }
    startButton.addEventListener("click", startGame);
    document.addEventListener("keydown", (e) => {
      if (!gameStarted && e.code === "Space") {
        startGame();
      }
    });

    // Settings Modal Functionality.
    settingsButton.addEventListener("click", () => { settingsModal.style.display = "block"; });
    closeSettings.addEventListener("click", () => { settingsModal.style.display = "none"; });
    saveSettingsButton.addEventListener("click", () => {
      gameColor = gameColorSelect.value;
      canvas.style.background = gameColor;
      contrastColor = getContrastingColor(gameColor);
      vocabDifficulty = vocabDifficultySelect.value;
      // Validate and update number of lives.
      let livesValue = parseInt(livesCountInput.value, 10);
      if (isNaN(livesValue) || livesValue < 1) livesValue = 1;
      if (livesValue > 10) livesValue = 10;
      maxLives = livesValue;
      playerLives = maxLives;
      settingsModal.style.display = "none";
    });

    // When a life is lost, trigger a heart-cracking animation.
    function triggerHeartAnimation(lostIndex) {
      heartAnimations.push({ index: lostIndex, startTime: performance.now(), duration: 500 });
    }

    // Trigger the vocabulary challenge when no lives remain.
    function triggerVocabChallenge() {
      gamePaused = true;
      // Check and update high score.
      if (score > highScore) {
        highScore = score;
        localStorage.setItem("vocabPongHighScore", highScore);
      }
      currentWord = getRandomVocabWord();
      vocabPrompt.textContent = "Spell: " + currentWord;
      vocabAnswerInput.value = "";
      vocabFeedback.textContent = "";
      vocabModal.style.display = "block";
      failSound.play();
    }

    submitVocabButton.addEventListener("click", () => {
      let answer = vocabAnswerInput.value.trim().toLowerCase();
      if (answer === currentWord.toLowerCase()) {
        vocabModal.style.display = "none";
        successSound.play();
        // Reset lives and resume game.
        playerLives = maxLives;
        resetBall(1);
        gamePaused = false;
        gameLoop();
      } else {
        vocabFeedback.textContent = "Incorrect! Try again.";
      }
    });

    // -----------------------
    // DRAWING HEARTS (Lives)
    // -----------------------
    function drawHearts() {
      const heartWidth = 30;
      const heartHeight = 30;
      const baseX = 20, baseY = 10;
      const gap = 10;
      const now = performance.now();

      // Draw intact hearts.
      for (let i = 0; i < playerLives; i++) {
        let x = baseX + i * (heartWidth + gap);
        ctx.drawImage(heartImage, x, baseY, heartWidth, heartHeight);
      }
      // Draw any heart-cracking animation for a heart that's just been lost.
      // We expect an animation at index = playerLives (the most recently lost heart).
      heartAnimations = heartAnimations.filter(anim => {
        let elapsed = now - anim.startTime;
        if (elapsed < anim.duration) {
          let progress = elapsed / anim.duration;
          let alpha = 1 - progress;
          ctx.save();
          ctx.globalAlpha = alpha;
          let x = baseX + anim.index * (heartWidth + gap);
          ctx.drawImage(crackedHeartImage, x, baseY, heartWidth, heartHeight);
          ctx.restore();
          return true; // keep animating.
        } else {
          return false; // remove finished animation.
        }
      });
    }

    // -----------------------
    // MAIN GAME LOOP
    // -----------------------
    function gameLoop() {
      if (!gameStarted || gamePaused) return;
      update();
      draw();
      requestAnimationFrame(gameLoop);
    }

    // Update positions and handle collisions.
    function update() {
      // Player paddle movement (ArrowUp/W and ArrowDown/S).
      if (keysDown["ArrowUp"] || keysDown["w"]) playerPaddle.y -= paddleSpeed;
      if (keysDown["ArrowDown"] || keysDown["s"]) playerPaddle.y += paddleSpeed;
      if (playerPaddle.y < 0) playerPaddle.y = 0;
      if (playerPaddle.y + playerPaddle.height > canvas.height)
        playerPaddle.y = canvas.height - playerPaddle.height;

      // Simple AI for right paddle.
      if (ball.y < aiPaddle.y + aiPaddle.height / 2)
        aiPaddle.y -= paddleSpeed * 0.85;
      else
        aiPaddle.y += paddleSpeed * 0.85;
      if (aiPaddle.y < 0) aiPaddle.y = 0;
      if (aiPaddle.y + aiPaddle.height > canvas.height)
        aiPaddle.y = canvas.height - aiPaddle.height;

      // Move the ball.
      ball.x += ball.velocityX;
      ball.y += ball.velocityY;

      // Bounce off top & bottom walls.
      if (ball.y - ball.radius < 0 || ball.y + ball.radius > canvas.height)
        ball.velocityY = -ball.velocityY;

      // Detect collision with player's paddle.
      if (ball.x - ball.radius < playerPaddle.x + playerPaddle.width &&
          ball.y > playerPaddle.y &&
          ball.y < playerPaddle.y + playerPaddle.height) {
        ball.velocityX = -ball.velocityX;
        hitSound.play();
        score++;
      }
      
      // Detect collision with AI paddle.
      if (ball.x + ball.radius > aiPaddle.x &&
          ball.y > aiPaddle.y &&
          ball.y < aiPaddle.y + aiPaddle.height) {
        ball.velocityX = -ball.velocityX;
        hitSound.play();
      }
      
      // Player misses (ball escapes left).
      if (ball.x - ball.radius < 0) {
        // Trigger heart cracking animation for the lost life.
        triggerHeartAnimation(playerLives);
        playerLives--;
        if (playerLives <= 0) {
          triggerVocabChallenge();
          return;
        } else {
          resetBall(1);
          failSound.play();
        }
      }
      
      // AI misses (ball escapes right): increase score and reset ball.
      if (ball.x + ball.radius > canvas.width) {
        score++;
        scoreSound.play();
        resetBall(-1);
      }
    }

    // Render game elements.
    function draw() {
      // Clear canvas.
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      // Fill background.
      ctx.fillStyle = gameColor;
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      
      // Draw dashed center line.
      ctx.strokeStyle = contrastColor;
      ctx.setLineDash([5, 5]);
      ctx.beginPath();
      ctx.moveTo(canvas.width / 2, 0);
      ctx.lineTo(canvas.width / 2, canvas.height);
      ctx.stroke();
      ctx.setLineDash([]);

      // Draw paddles using sprites.
      ctx.drawImage(paddleImage, playerPaddle.x, playerPaddle.y, playerPaddle.width, playerPaddle.height);
      ctx.drawImage(paddleImage, aiPaddle.x, aiPaddle.y, aiPaddle.width, aiPaddle.height);
      
      // Draw the ball using sprite.
      ctx.drawImage(ballImage, ball.x - ball.radius, ball.y - ball.radius, ball.radius * 2, ball.radius * 2);
      
      // Draw score and high score.
      ctx.fillStyle = contrastColor;
      ctx.font = "20px Arial";
      ctx.fillText("Score: " + score, canvas.width / 2 - 60, 30);
      ctx.fillText("High Score: " + highScore, canvas.width / 2 + 20, 30);
      
      // Draw life hearts (with any cracking animation).
      drawHearts();
    }
  </script>
</body>
</html>
