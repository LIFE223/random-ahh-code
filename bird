<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flappy Math</title>
    <style>
        body {
            text-align: center;
            background-color: skyblue;
            overflow: hidden;
        }
        canvas {
            border: 2px solid black;
            background-color: lightgreen;
        }
        #math-popup {
            display: none;
            position: absolute;
            top: 30%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 20px;
            border: 2px solid black;
        }
    </style>
</head>
<body>
    <h1>Flappy Math</h1>
    <canvas id="gameCanvas" width="400" height="500"></canvas>
    <div id="math-popup">
        <p id="math-question">Solve: 5 + 3 = ?</p>
        <input type="number" id="math-answer">
        <button onclick="checkAnswer()">Submit</button>
    </div>
    <script>
        const canvas = document.getElementById("gameCanvas");
        const ctx = canvas.getContext("2d");

        let bird = { x: 50, y: 250, radius: 15, velocity: 0 };
        let gravity = 0.5;
        let pipes = [];
        let gameRunning = true;

        function drawBird() {
            ctx.fillStyle = "yellow";
            ctx.beginPath();
            ctx.arc(bird.x, bird.y, bird.radius, 0, Math.PI * 2);
            ctx.fill();
        }

        function drawPipes() {
            ctx.fillStyle = "green";
            pipes.forEach(pipe => {
                ctx.fillRect(pipe.x, 0, pipe.width, pipe.top);
                ctx.fillRect(pipe.x, pipe.bottom, pipe.width, canvas.height - pipe.bottom);
            });
        }

        function updateGame() {
            if (!gameRunning) return;
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            bird.velocity += gravity;
            bird.y += bird.velocity;

            pipes.forEach(pipe => { pipe.x -= 2; });

            if (bird.y > canvas.height || pipes.some(pipe => bird.x > pipe.x && bird.x < pipe.x + pipe.width && (bird.y < pipe.top || bird.y > pipe.bottom))) {
                gameRunning = false;
                showMathPopup();
            }

            drawBird();
            drawPipes();
            requestAnimationFrame(updateGame);
        }

        function showMathPopup() {
            document.getElementById("math-popup").style.display = "block";
            const num1 = Math.floor(Math.random() * 10);
            const num2 = Math.floor(Math.random() * 10);
            document.getElementById("math-question").innerText = `Solve: ${num1} + ${num2} = ?`;
        }

        function checkAnswer() {
            const userAnswer = parseInt(document.getElementById("math-answer").value);
            const correctAnswer = eval(document.getElementById("math-question").innerText.split(": ")[1].replace(" = ?", ""));
            if (userAnswer === correctAnswer) {
                document.getElementById("math-popup").style.display = "none";
                gameRunning = true;
                updateGame();
            } else {
                alert("Incorrect! Try again.");
            }
